/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 181);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./platform/plugins/custom-field/resources/assets/js/use-custom-fields.js":
/*!********************************************************************************!*\
  !*** ./platform/plugins/custom-field/resources/assets/js/use-custom-fields.js ***!
  \********************************************************************************/
/*! exports provided: Helpers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Helpers\", function() { return Helpers; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Helpers = /*#__PURE__*/function () {\n  function Helpers() {\n    _classCallCheck(this, Helpers);\n  }\n\n  _createClass(Helpers, null, [{\n    key: \"wysiwyg\",\n\n    /**\r\n     * Render a WYSIWYG editor\r\n     * @param $elements\r\n     * @param config\r\n     */\n    value: function wysiwyg($elements, config) {\n      window.initializedEditor = window.initializedEditor || 0;\n      $elements.each(function (index, el) {\n        var $_self = $(el);\n        $_self.attr('id', 'editor_initialized_' + window.initializedEditor);\n        window.initializedEditor++;\n        setTimeout(function () {\n          config = $.extend(true, {\n            forcePasteAsPlainText: true,\n            allowedContent: true,\n            htmlEncodeOutput: false,\n            protectedSource: [/<\\?[\\s\\S]*?\\?>/g, /<%[\\s\\S]*?%>/g, /(<asp:[^\\>]+>[\\s|\\S]*?<\\/asp:[^\\>]+>)|(<asp:[^\\>]+\\/>)/gi],\n            filebrowserImageBrowseUrl: RV_MEDIA_URL.base + '?media-action=select-files&method=ckeditor&type=image',\n            filebrowserImageUploadUrl: RV_MEDIA_URL.media_upload_from_editor + '?method=ckeditor&type=image&_token=' + $('meta[name=\"csrf-token\"]').attr('content'),\n            filebrowserWindowWidth: '768',\n            filebrowserWindowHeight: '500',\n            height: $_self.data('height') || '400px',\n            toolbar: $_self.data('toolbar') || 'full'\n          }, config);\n          config = $.extend(true, config, $_self.data());\n\n          if (config.toolbar === 'basic') {\n            config.toolbar = [['mode', 'Source', 'Image', 'TextColor', 'BGColor', 'Styles', 'Format', 'Font', 'FontSize', 'CreateDiv', 'PageBreak', 'Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', 'RemoveFormat']];\n          }\n\n          CKEDITOR.replace($_self.attr('id'), config);\n        }, 100);\n      });\n    }\n  }, {\n    key: \"wysiwygGetContent\",\n    value: function wysiwygGetContent($element) {\n      return CKEDITOR.instances[$element.attr('id')].getData();\n    }\n  }, {\n    key: \"arrayGet\",\n    value: function arrayGet(array, key) {\n      var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var result;\n\n      try {\n        result = array[key];\n      } catch (err) {\n        return defaultValue;\n      }\n\n      if (result === null || typeof result === 'undefined') {\n        result = defaultValue;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"jsonEncode\",\n    value: function jsonEncode(object) {\n      if (typeof object === 'undefined') {\n        object = null;\n      }\n\n      return JSON.stringify(object);\n    }\n  }, {\n    key: \"jsonDecode\",\n    value: function jsonDecode(jsonString, defaultValue) {\n      if (typeof jsonString === 'string') {\n        var result;\n\n        try {\n          result = $.parseJSON(jsonString);\n        } catch (err) {\n          result = defaultValue;\n        }\n\n        return result;\n      }\n\n      return null;\n    }\n  }]);\n\n  return Helpers;\n}();\n\nvar UseCustomFields = /*#__PURE__*/function () {\n  function UseCustomFields() {\n    _classCallCheck(this, UseCustomFields);\n\n    this.$body = $('body');\n    /**\r\n     * Where to show the custom field elements\r\n     */\n\n    this.$_UPDATE_TO = $('#custom_fields_container');\n    /**\r\n     * Where to export json data when submit form\r\n     */\n\n    this.$_EXPORT_TO = $('#custom_fields_json');\n    this.CURRENT_DATA = Helpers.jsonDecode(this.base64Helper().decode(this.$_EXPORT_TO.text()), []);\n\n    if (this.CURRENT_DATA) {\n      this.handleCustomFields();\n      this.exportData();\n    }\n  }\n\n  _createClass(UseCustomFields, [{\n    key: \"base64Helper\",\n    value: function base64Helper() {\n      if (!this.base64) {\n        var Base64 = {\n          _keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n          encode: function encode(e) {\n            var t = '';\n            var n, r, i, s, o, u, a;\n            var f = 0;\n            e = Base64._utf8_encode(e);\n\n            while (f < e.length) {\n              n = e.charCodeAt(f++);\n              r = e.charCodeAt(f++);\n              i = e.charCodeAt(f++);\n              s = n >> 2;\n              o = (n & 3) << 4 | r >> 4;\n              u = (r & 15) << 2 | i >> 6;\n              a = i & 63;\n\n              if (isNaN(r)) {\n                u = a = 64;\n              } else if (isNaN(i)) {\n                a = 64;\n              }\n\n              t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a);\n            }\n\n            return t;\n          },\n          decode: function decode(e) {\n            var t = '';\n            var n, r, i;\n            var s, o, u, a;\n            var f = 0;\n            e = e.replace(/[^A-Za-z0-9+/=]/g, '');\n\n            while (f < e.length) {\n              s = this._keyStr.indexOf(e.charAt(f++));\n              o = this._keyStr.indexOf(e.charAt(f++));\n              u = this._keyStr.indexOf(e.charAt(f++));\n              a = this._keyStr.indexOf(e.charAt(f++));\n              n = s << 2 | o >> 4;\n              r = (o & 15) << 4 | u >> 2;\n              i = (u & 3) << 6 | a;\n              t = t + String.fromCharCode(n);\n\n              if (u != 64) {\n                t = t + String.fromCharCode(r);\n              }\n\n              if (a != 64) {\n                t = t + String.fromCharCode(i);\n              }\n            }\n\n            t = Base64._utf8_decode(t);\n            return t;\n          },\n          _utf8_encode: function _utf8_encode(e) {\n            e = e.replace(/rn/g, 'n');\n            var t = '';\n\n            for (var n = 0; n < e.length; n++) {\n              var r = e.charCodeAt(n);\n\n              if (r < 128) {\n                t += String.fromCharCode(r);\n              } else if (r > 127 && r < 2048) {\n                t += String.fromCharCode(r >> 6 | 192);\n                t += String.fromCharCode(r & 63 | 128);\n              } else {\n                t += String.fromCharCode(r >> 12 | 224);\n                t += String.fromCharCode(r >> 6 & 63 | 128);\n                t += String.fromCharCode(r & 63 | 128);\n              }\n            }\n\n            return t;\n          },\n          _utf8_decode: function _utf8_decode(e) {\n            var t = '';\n            var n = 0;\n            var r = 0,\n                c2 = 0;\n\n            while (n < e.length) {\n              r = e.charCodeAt(n);\n\n              if (r < 128) {\n                t += String.fromCharCode(r);\n                n++;\n              } else if (r > 191 && r < 224) {\n                c2 = e.charCodeAt(n + 1);\n                t += String.fromCharCode((r & 31) << 6 | c2 & 63);\n                n += 2;\n              } else {\n                c2 = e.charCodeAt(n + 1);\n                var c3 = e.charCodeAt(n + 2);\n                t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n                n += 3;\n              }\n            }\n\n            return t;\n          }\n        };\n        this.base64 = Base64;\n      }\n      /**\r\n       * @doc\r\n       * There are 2 methods: encode & decode\r\n       */\n\n\n      return this.base64;\n    }\n  }, {\n    key: \"handleCustomFields\",\n    value: function handleCustomFields() {\n      var _self = this;\n\n      var repeaterFieldAdded = 0;\n      /**\r\n       * The html template of custom fields\r\n       */\n\n      var FIELD_TEMPLATE = {\n        fieldGroup: $('#_render_custom_field_field_group_template').html(),\n        globalSkeleton: $('#_render_custom_field_global_skeleton_template').html(),\n        text: $('#_render_custom_field_text_template').html(),\n        number: $('#_render_custom_field_number_template').html(),\n        email: $('#_render_custom_field_email_template').html(),\n        password: $('#_render_custom_field_password_template').html(),\n        textarea: $('#_render_custom_field_textarea_template').html(),\n        checkbox: $('#_render_custom_field_checkbox_template').html(),\n        radio: $('#_render_custom_field_radio_template').html(),\n        select: $('#_render_custom_field_select_template').html(),\n        image: $('#_render_custom_field_image_template').html(),\n        file: $('#_render_custom_field_file_template').html(),\n        wysiwyg: $('#_render_custom_field_wysiswg_template').html(),\n        repeater: $('#_render_custom_field_repeater_template').html(),\n        repeaterItem: $('#_render_custom_field_repeater_item_template').html(),\n        repeaterFieldLine: $('#_render_custom_field_repeater_line_template').html()\n      };\n\n      var initWYSIWYG = function initWYSIWYG($element, type) {\n        Helpers.wysiwyg($element, {\n          toolbar: type\n        });\n        return $element;\n      };\n\n      var initCustomFieldsBoxes = function initCustomFieldsBoxes(boxes, $appendTo) {\n        boxes.forEach(function (box) {\n          var skeleton = FIELD_TEMPLATE.globalSkeleton;\n          skeleton = skeleton.replace(/__type__/gi, box.type || '');\n          skeleton = skeleton.replace(/__title__/gi, box.title || '');\n          skeleton = skeleton.replace(/__instructions__/gi, box.instructions || '');\n          var $skeleton = $(skeleton);\n          var $data = registerLine(box);\n          $skeleton.find('.meta-box-wrap').append($data);\n          $skeleton.data('lcf-registered-data', box);\n          $appendTo.append($skeleton);\n\n          if (box.type === 'wysiwyg') {\n            initWYSIWYG($skeleton.find('.meta-box-wrap .wysiwyg-editor'), box.options.wysiwygToolbar || 'basic');\n          }\n        });\n      };\n\n      var registerLine = function registerLine(box) {\n        var result = FIELD_TEMPLATE[box.type],\n            $wrapper = $('<div class=\"lcf-' + box.type + '-wrapper\"></div>');\n        $wrapper.data('lcf-registered-data', box);\n        var choices = null;\n        var $result = null;\n\n        switch (box.type) {\n          case 'text':\n          case 'number':\n          case 'email':\n          case 'password':\n            result = result.replace(/__placeholderText__/gi, box.options.placeholderText || '');\n            result = result.replace(/__value__/gi, box.value || box.options.defaultValue || '');\n            break;\n\n          case 'textarea':\n            result = result.replace(/__rows__/gi, box.options.rows || 3);\n            result = result.replace(/__placeholderText__/gi, box.options.placeholderText || '');\n            result = result.replace(/__value__/gi, box.value || box.options.defaultValue || '');\n            break;\n\n          case 'image':\n            result = result.replace(/__value__/gi, box.value || box.options.defaultValue || '');\n\n            if (!box.value) {\n              var defaultImage = $(result).find('img').attr('data-default');\n              result = result.replace(/__image__/gi, defaultImage || box.options.defaultValue || '');\n            } else {\n              result = result.replace(/__image__/gi, box.thumb || box.options.defaultValue || '');\n            }\n\n            break;\n\n          case 'file':\n            result = result.replace(/__value__/gi, box.value || box.options.defaultValue || '');\n            result = result.replace(/__url__/gi, box.full_url || box.options.defaultValue || '');\n            break;\n\n          case 'select':\n            $result = $(result);\n            choices = parseChoices(box.options.selectChoices);\n            choices.forEach(function (choice) {\n              $result.append('<option value=\"' + choice[0] + '\">' + choice[1] + '</option>');\n            });\n            $result.val(Helpers.arrayGet(box, 'value', box.options.defaultValue));\n            $wrapper.append($result);\n            return $wrapper;\n\n          case 'checkbox':\n            choices = parseChoices(box.options.selectChoices);\n            var boxValue = Helpers.jsonDecode(box.value);\n            choices.forEach(function (choice) {\n              var template = result.replace(/__value__/gi, choice[0] || '');\n              template = template.replace(/__title__/gi, choice[1] || '');\n              template = template.replace(/__checked__/gi, $.inArray(choice[0], boxValue) != -1 ? 'checked' : '');\n              $wrapper.append($(template));\n            });\n            return $wrapper;\n\n          case 'radio':\n            choices = parseChoices(box.options.selectChoices);\n            var isChecked = false;\n            choices.forEach(function (choice) {\n              var template = result.replace(/__value__/gi, choice[0] || '');\n              template = template.replace(/__id__/gi, box.id + box.slug + repeaterFieldAdded);\n              template = template.replace(/__title__/gi, choice[1] || '');\n              template = template.replace(/__checked__/gi, box.value === choice[0] ? 'checked' : '');\n              $wrapper.append($(template));\n\n              if (box.value === choice[0]) {\n                isChecked = true;\n              }\n            });\n\n            if (isChecked === false) {\n              $wrapper.find('input[type=radio]:first').prop('checked', true);\n            }\n\n            return $wrapper;\n\n          case 'repeater':\n            $result = $(result);\n            $result.data('lcf-registered-data', box);\n            $result.find('> .repeater-add-new-field').html(box.options.buttonLabel || 'Add new item');\n            $result.find('> .sortable-wrapper').sortable();\n            registerRepeaterItem(box.items, box.value || [], $result.find('> .field-group-items'));\n            return $result;\n\n          case 'wysiwyg':\n            result = result.replace(/__value__/gi, box.value || '');\n            $(result).attr('data-toolbar', box.options.wysiwygToolbar || 'basic');\n            break;\n        }\n\n        $wrapper.append($(result));\n        return $wrapper;\n      };\n\n      var registerRepeaterItem = function registerRepeaterItem(items, data, $appendTo) {\n        $appendTo.data('lcf-registered-data', items);\n        data.forEach(function (dataItem) {\n          var indexCss = $appendTo.find('> .ui-sortable-handle').length + 1;\n          var result = FIELD_TEMPLATE.repeaterItem;\n          result = result.replace(/__position__/gi, indexCss);\n          var $result = $(result);\n          $result.data('lcf-registered-data', items);\n          registerRepeaterFieldLine(items, dataItem, $result.find('> .field-line-wrapper > .field-group'));\n          $appendTo.append($result);\n        });\n        return $appendTo;\n      };\n\n      var registerRepeaterFieldLine = function registerRepeaterFieldLine(items, data, $appendTo) {\n        data.forEach(function (item) {\n          repeaterFieldAdded++;\n          var result = FIELD_TEMPLATE.repeaterFieldLine;\n          result = result.replace(/__title__/gi, item.title || '');\n          result = result.replace(/__instructions__/gi, item.instructions || '');\n          var $result = $(result);\n          var $data = registerLine(item);\n          $result.data('lcf-registered-data', item);\n          $result.find('> .repeater-item-input').append($data);\n          $appendTo.append($result);\n\n          if (item.type === 'wysiwyg') {\n            initWYSIWYG($result.find('> .repeater-item-input .wysiwyg-editor'), item.options.wysiwygToolbar || 'basic');\n          }\n        });\n        return $appendTo;\n      };\n\n      var parseChoices = function parseChoices(choiceString) {\n        var choices = [];\n        choiceString.split('\\n').forEach(function (item) {\n          var currentChoice = item.split(':');\n\n          if (currentChoice[0] && currentChoice[1]) {\n            currentChoice[0] = currentChoice[0].trim();\n            currentChoice[1] = currentChoice[1].trim();\n          }\n\n          choices.push(currentChoice);\n        });\n        return choices;\n      };\n      /**\r\n       * Remove field item\r\n       */\n\n\n      this.$body.on('click', '.remove-field-line', function (event) {\n        event.preventDefault();\n        var current = $(event.currentTarget);\n        current.parent().animate({\n          opacity: 0.1\n        }, 300, function () {\n          current.parent().remove();\n        });\n      });\n      /**\r\n       * Collapse field item\r\n       */\n\n      this.$body.on('click', '.collapse-field-line', function (event) {\n        event.preventDefault();\n        var current = $(event.currentTarget);\n        current.toggleClass('collapsed-line');\n      });\n      /**\r\n       * Add new repeater line\r\n       */\n\n      this.$body.on('click', '.repeater-add-new-field', function (event) {\n        event.preventDefault();\n        var $groupWrapper = $.extend(true, {}, $(event.currentTarget).prev('.field-group-items'));\n        var registeredData = $groupWrapper.data('lcf-registered-data');\n        repeaterFieldAdded++;\n        registerRepeaterItem(registeredData, [registeredData], $groupWrapper);\n        ZHXCore.initMediaIntegrate();\n      });\n      /**\r\n       * Init data when page loaded\r\n       */\n\n      this.CURRENT_DATA.forEach(function (group) {\n        var groupTemplate = FIELD_TEMPLATE.fieldGroup;\n        groupTemplate = groupTemplate.replace(/__title__/gi, group.title || '');\n        var $groupTemplate = $(groupTemplate);\n        initCustomFieldsBoxes(group.items, $groupTemplate.find('.meta-boxes-body'));\n        $groupTemplate.data('lcf-field-group', group);\n\n        _self.$_UPDATE_TO.append($groupTemplate);\n      });\n      ZHXCore.initMediaIntegrate();\n    }\n  }, {\n    key: \"exportData\",\n    value: function exportData() {\n      var _self = this;\n\n      var getFieldGroups = function getFieldGroups() {\n        var fieldGroups = [];\n        $('#custom_fields_container').find('> .meta-boxes').each(function (index, el) {\n          var $current = $(el);\n          var currentData = $current.data('lcf-field-group');\n          var $items = $current.find('> .meta-boxes-body > .meta-box');\n          currentData.items = getFieldItems($items);\n          fieldGroups.push(currentData);\n        });\n        return fieldGroups;\n      };\n\n      var getFieldItems = function getFieldItems($items) {\n        var items = [];\n        $items.each(function (index, el) {\n          items.push(getFieldItemValue($(el)));\n        });\n        return items;\n      };\n\n      var getFieldItemValue = function getFieldItemValue($item) {\n        var customFieldData = $.extend(true, {}, $item.data('lcf-registered-data'));\n\n        switch (customFieldData.type) {\n          case 'text':\n          case 'number':\n          case 'email':\n          case 'password':\n          case 'image':\n          case 'file':\n            customFieldData.value = $item.find('> .meta-box-wrap input').val();\n            break;\n\n          case 'wysiwyg':\n            customFieldData.value = Helpers.wysiwygGetContent($item.find('> .meta-box-wrap textarea'));\n            break;\n\n          case 'textarea':\n            customFieldData.value = $item.find('> .meta-box-wrap textarea').val();\n            break;\n\n          case 'checkbox':\n            customFieldData.value = [];\n            $item.find('> .meta-box-wrap input:checked').each(function (index, el) {\n              customFieldData.value.push($(el).val());\n            });\n            break;\n\n          case 'radio':\n            customFieldData.value = $item.find('> .meta-box-wrap input:checked').val();\n            break;\n\n          case 'select':\n            customFieldData.value = $item.find('> .meta-box-wrap select').val();\n            break;\n\n          case 'repeater':\n            customFieldData.value = [];\n            var $repeaterItems = $item.find('> .meta-box-wrap > .lcf-repeater > .field-group-items > li');\n            $repeaterItems.each(function (index, el) {\n              var $current = $(el);\n              var fieldGroup = $current.find('> .field-line-wrapper > .field-group');\n              customFieldData.value.push(getRepeaterItemData(fieldGroup.find('> li')));\n            });\n            break;\n\n          default:\n            customFieldData = null;\n            break;\n        }\n\n        return customFieldData;\n      };\n\n      var getRepeaterItemData = function getRepeaterItemData($where) {\n        var data = [];\n        $where.each(function (index, el) {\n          var $current = $(el);\n          data.push(getRepeaterItemValue($current));\n        });\n        return data;\n      };\n\n      var getRepeaterItemValue = function getRepeaterItemValue($item) {\n        var customFieldData = $.extend(true, {}, $item.data('lcf-registered-data'));\n\n        switch (customFieldData.type) {\n          case 'text':\n          case 'number':\n          case 'email':\n          case 'password':\n          case 'image':\n          case 'file':\n            customFieldData.value = $item.find('> .repeater-item-input input').val();\n            break;\n\n          case 'wysiwyg':\n            customFieldData.value = Helpers.wysiwygGetContent($item.find('> .repeater-item-input > .lcf-wysiwyg-wrapper > .wysiwyg-editor'));\n            break;\n\n          case 'textarea':\n            customFieldData.value = $item.find('> .repeater-item-input textarea').val();\n            break;\n\n          case 'checkbox':\n            customFieldData.value = [];\n            $item.find('> .repeater-item-input input:checked').each(function (index, el) {\n              customFieldData.value.push($(el).val());\n            });\n            break;\n\n          case 'radio':\n            customFieldData.value = $item.find('> .repeater-item-input input:checked').val();\n            break;\n\n          case 'select':\n            customFieldData.value = $item.find('> .repeater-item-input select').val();\n            break;\n\n          case 'repeater':\n            customFieldData.value = [];\n            var $repeaterItems = $item.find('> .repeater-item-input > .lcf-repeater > .field-group-items > li');\n            $repeaterItems.each(function (index, el) {\n              var $current = $(el);\n              var fieldGroup = $current.find('> .field-line-wrapper > .field-group');\n              customFieldData.value.push(getRepeaterItemData(fieldGroup.find('> li')));\n            });\n            break;\n\n          default:\n            customFieldData = null;\n            break;\n        }\n\n        return customFieldData;\n      };\n\n      _self.$_EXPORT_TO.closest('form').on('submit', function () {\n        _self.$_EXPORT_TO.val(Helpers.jsonEncode(getFieldGroups()));\n      });\n    }\n  }]);\n\n  return UseCustomFields;\n}();\n\n(function ($) {\n  $(document).ready(function () {\n    new UseCustomFields();\n  });\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./platform/plugins/custom-field/resources/assets/js/use-custom-fields.js\n");

/***/ }),

/***/ 181:
/*!**************************************************************************************!*\
  !*** multi ./platform/plugins/custom-field/resources/assets/js/use-custom-fields.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! E:\Jaydeep Mor\Work\Evolution IT Solutions\zhxcore\zhxcore_admin\platform\plugins\custom-field\resources\assets\js\use-custom-fields.js */"./platform/plugins/custom-field/resources/assets/js/use-custom-fields.js");


/***/ })

/******/ });