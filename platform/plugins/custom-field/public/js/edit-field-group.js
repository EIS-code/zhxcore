/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 180);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./platform/plugins/custom-field/resources/assets/js/edit-field-group.js":
/*!*******************************************************************************!*\
  !*** ./platform/plugins/custom-field/resources/assets/js/edit-field-group.js ***!
  \*******************************************************************************/
/*! exports provided: Helpers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Helpers\", function() { return Helpers; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Helpers = /*#__PURE__*/function () {\n  function Helpers() {\n    _classCallCheck(this, Helpers);\n  }\n\n  _createClass(Helpers, null, [{\n    key: \"arrayGet\",\n    value: function arrayGet(array, key) {\n      var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var result;\n\n      try {\n        result = array[key];\n      } catch (err) {\n        return defaultValue;\n      }\n\n      if (result === null || typeof result == 'undefined') {\n        result = defaultValue;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"stringToSlug\",\n    value: function stringToSlug(text, separator) {\n      separator = separator || '-';\n      return text.toString()\n      /*To lower case*/\n      .toLowerCase()\n      /*Vietnamese string*/\n      .replace(/á|à|ả|ạ|ã|ă|ắ|ằ|ẳ|ẵ|ặ|â|ấ|ầ|ẩ|ẫ|ậ/gi, 'a').replace(/é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ/gi, 'e').replace(/i|í|ì|ỉ|ĩ|ị/gi, 'i').replace(/ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ/gi, 'o').replace(/ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự/gi, 'u').replace(/ý|ỳ|ỷ|ỹ|ỵ/gi, 'y').replace(/đ/gi, 'd')\n      /*Replace spaces with -*/\n      .replace(/\\s+/g, separator)\n      /*Remove all non-word chars*/\n      .replace(/[^\\w\\-]+/g, '')\n      /*Replace multiple - with single -*/\n      .replace(/\\-\\-+/g, separator)\n      /*Trim - from start of text*/\n      .replace(/^-+/, '')\n      /*Trim - from end of text*/\n      .replace(/-+$/, '');\n    }\n  }]);\n\n  return Helpers;\n}();\n\nvar ManageCustomFields = /*#__PURE__*/function () {\n  function ManageCustomFields() {\n    _classCallCheck(this, ManageCustomFields);\n\n    this.$body = $('body');\n    this.RULES_GROUP_TEMPLATE_HTML = $('#rules_group_template').html();\n\n    var _self = this;\n    /**\r\n     * Pass data to form when submit\r\n     */\n\n\n    this.$body.on('submit', '.form-update-field-group', function () {\n      var dataRules = JSON.stringify(_self.exportRulesToJson());\n      var dataFields = JSON.stringify(_self.exportFieldsToJson());\n      $('#custom_fields_rules').html(dataRules).val(dataRules);\n      $('#custom_fields').html(dataFields).val(dataFields);\n    });\n\n    if ($('#custom_fields_rules').length > 0) {\n      this.handleRules();\n      this.handleFieldGroups();\n    }\n  }\n\n  _createClass(ManageCustomFields, [{\n    key: \"handleRules\",\n    value: function handleRules() {\n      var _self = this;\n\n      var CURRENT_RULES = $.parseJSON($('#custom_fields_rules').val());\n      var $_GLOBAL_TEMPLATE = $(_self.RULES_GROUP_TEMPLATE_HTML),\n          LINE_GROUP_TEMPLATE = $('#rules_line_group_template').html(),\n          $_GROUP_CONTAINER = $('.line-group-container');\n      /**\r\n       * Add new rule\r\n       */\n\n      _self.$body.on('click', '.location-add-rule', function (event) {\n        event.preventDefault();\n        var $current = $(event.currentTarget);\n        var $template = $_GLOBAL_TEMPLATE.clone();\n\n        if ($current.hasClass('location-add-rule-and')) {\n          $current.closest('.line-group').append($template);\n        } else {\n          var $group = $(LINE_GROUP_TEMPLATE);\n          $group.append($template);\n          $_GROUP_CONTAINER.append($group);\n        }\n\n        $template.find('.rule-a').trigger('change');\n      });\n      /**\r\n       * Change the rule-a\r\n       */\n\n\n      _self.$body.on('change', '.rule-a', function (event) {\n        event.preventDefault();\n        var $current = $(event.currentTarget);\n        var $parent = $current.closest('.rule-line');\n        $parent.find('.rules-b-group select').addClass('hidden');\n        $parent.find('.rules-b-group select[data-rel=\"' + $current.val() + '\"]').removeClass('hidden');\n      });\n      /**\r\n       * Remove rule\r\n       */\n\n\n      _self.$body.on('click', '.remove-rule-line', function (event) {\n        event.preventDefault();\n        var $current = $(event.currentTarget);\n        var $parent = $current.closest('.rule-line');\n        var $lineGroup = $current.closest('.line-group');\n\n        if ($lineGroup.find('.rule-line').length < 2) {\n          $lineGroup.remove();\n        } else {\n          $parent.remove();\n        }\n      });\n      /**\r\n       * Init data when page loaded\r\n       */\n\n\n      if (CURRENT_RULES.length < 1) {\n        $('.location-add-rule').trigger('click');\n      } else {\n        CURRENT_RULES.forEach(function (rules) {\n          var $group = $(LINE_GROUP_TEMPLATE);\n          rules.forEach(function (item) {\n            var $template = $_GLOBAL_TEMPLATE.clone();\n            $template.find('.rule-a').val(item.name);\n            $template.find('.rule-type').val(item.type);\n            $template.find('.rule-b:not([data-rel=\"' + item.name + '\"])').addClass('hidden');\n            $template.find('.rule-b[data-rel=\"' + item.name + '\"]').val(item.value);\n            $group.append($template);\n          });\n          $_GROUP_CONTAINER.append($group);\n        });\n      }\n    }\n  }, {\n    key: \"handleFieldGroups\",\n    value: function handleFieldGroups() {\n      var _self = this;\n\n      var totalAdded = 0;\n      var CUSTOM_FIELDS_DATA = $.parseJSON($('#custom_fields').val());\n      /**\r\n       * Deleted fields\r\n       * @type {Array}\r\n       */\n\n      var DELETED_FIELDS = [];\n      /**\r\n       * Template of new field item\r\n       * @type {any}\r\n       */\n\n      var NEW_FIELD_TEMPLATE = $('#_new-field-source_template').html();\n      /**\r\n       * Get all option templates\r\n       * @type {{repeater: (any), defaultValue: (any), defaultValueTextarea: (any), placeholderText: (any), wysiwygToolbar: (any), selectChoices: (any), buttonLabel: (any)}}\r\n       */\n\n      var FIELD_OPTIONS = {\n        repeater: $('#_options-repeater_template').html(),\n        defaultValue: $('#_options-defaultvalue_template').html(),\n        defaultValueTextarea: $('#_options-defaultvaluetextarea_template').html(),\n        placeholderText: $('#_options-placeholdertext_template').html(),\n        wysiwygToolbar: $('#_options-wysiwygtoolbar_template').html(),\n        selectChoices: $('#_options-selectchoices_template').html(),\n        buttonLabel: $('#_options-buttonlabel_template').html(),\n        rows: $('#_options-rows_template').html()\n      };\n      /**\r\n       * Get related options of current field type\r\n       * @param value\r\n       * @returns {string}\r\n       */\n\n      var getOptions = function getOptions(value) {\n        var htmlSrc = '';\n\n        switch (value) {\n          case 'text':\n          case 'email':\n          case 'password':\n          case 'number':\n            htmlSrc += FIELD_OPTIONS.defaultValue + FIELD_OPTIONS.placeholderText;\n            break;\n\n          case 'image':\n          case 'file':\n            htmlSrc += '';\n            break;\n\n          case 'textarea':\n            htmlSrc += FIELD_OPTIONS.defaultValueTextarea + FIELD_OPTIONS.placeholderText + FIELD_OPTIONS.rows;\n            break;\n\n          case 'wysiwyg':\n            htmlSrc += FIELD_OPTIONS.defaultValueTextarea + FIELD_OPTIONS.wysiwygToolbar;\n            break;\n\n          case 'select':\n            htmlSrc += FIELD_OPTIONS.selectChoices + FIELD_OPTIONS.defaultValue;\n            break;\n\n          case 'checkbox':\n            htmlSrc += FIELD_OPTIONS.selectChoices;\n            break;\n\n          case 'radio':\n            htmlSrc += FIELD_OPTIONS.selectChoices;\n            break;\n\n          case 'repeater':\n            htmlSrc += FIELD_OPTIONS.repeater + FIELD_OPTIONS.buttonLabel;\n            break;\n        }\n\n        return htmlSrc;\n      };\n      /**\r\n       * @param target\r\n       */\n\n\n      var reloadOrderNumber = function reloadOrderNumber(target) {\n        target.each(function (index, el) {\n          var current = $(el);\n          var index_css = index + 1;\n          current.attr('data-position', index_css);\n        });\n      };\n\n      var setOrderNumber = function setOrderNumber(target, number) {\n        target.attr('data-position', number || target.index() + 1);\n      };\n\n      var getNewFieldTemplate = function getNewFieldTemplate(optionType) {\n        return NEW_FIELD_TEMPLATE.replace(/___options___/gi, getOptions(optionType || 'text'));\n      };\n      /**\r\n       * Toggle show/hide content\r\n       */\n\n\n      _self.$body.on('click', '.show-item-details', function (event) {\n        event.preventDefault();\n        var parent = $(event.currentTarget).closest('li');\n        $(event.currentTarget).toggleClass('active');\n        parent.toggleClass('active');\n      });\n\n      _self.$body.on('click', '.btn-close-field', function (event) {\n        event.preventDefault();\n        var parent = $(event.currentTarget).closest('li');\n        parent.toggleClass('active');\n        parent.find('> .field-column .show-item-details').toggleClass('active');\n      });\n      /**\r\n       * Add field\r\n       */\n\n\n      _self.$body.on('click', '.btn-add-field', function (event) {\n        event.preventDefault();\n        var $current = $(event.currentTarget);\n        totalAdded++;\n        var target = $current.closest('.add-new-field').find('> .sortable-wrapper');\n        var $template = $(getNewFieldTemplate());\n        target.append($template);\n        $template.find('.line[data-option=title] input[type=text]').focus();\n        setOrderNumber($template);\n        $template.find('.sortable-wrapper').sortable();\n      });\n      /**\r\n       * Change field type\r\n       */\n\n\n      _self.$body.on('change', '.change-field-type', function (event) {\n        event.preventDefault();\n        var $current = $(event.currentTarget);\n        var parent = $current.closest('.item-details');\n        var target = parent.find('> .options');\n        target.html(getOptions($current.val()));\n      });\n      /**\r\n       * Change the related columns title\r\n       */\n\n\n      _self.$body.on('change blur', '.line[data-option=slug] input[type=text]', function (event) {\n        var $current = $(event.currentTarget);\n        var text = Helpers.stringToSlug($current.val(), '_');\n        var $parent = $current.closest('.line');\n        $parent.closest('.ui-sortable-handle').find('> .field-column .field-slug').text(text);\n        $current.val(text);\n      });\n\n      _self.$body.on('change blur', '.line[data-option=type] select', function (event) {\n        var $current = $(event.currentTarget);\n        var text = Helpers.stringToSlug($current.val(), '_');\n        var $parent = $current.closest('.line');\n        $parent.closest('.ui-sortable-handle').find('> .field-column .field-type').text($current.find('option[value=\"' + text + '\"]').text());\n        $current.val(text);\n      });\n\n      _self.$body.on('change blur', '.line[data-option=title] input[type=text]', function (event) {\n        var $current = $(event.currentTarget);\n        var $parent = $current.closest('.line');\n        var $nameSlugField = $parent.find('~ .line[data-option=slug] input[type=text]');\n        var text = $current.val();\n        /**\r\n         * Change the line title\r\n         */\n\n        $parent.closest('.ui-sortable-handle').find('> .field-column .field-label').text(text);\n        /**\r\n         * Change field name\r\n         */\n\n        if (!$nameSlugField.val()) {\n          $nameSlugField.val(Helpers.stringToSlug(text, '_')).trigger('change');\n        }\n      });\n      /**\r\n       * Delete field\r\n       */\n\n\n      $('#deleted_items').val('');\n\n      _self.$body.on('click', '.btn-remove', function (event) {\n        event.preventDefault();\n        var $parent = $(event.currentTarget).closest('.ui-sortable-handle');\n        var $grandParent = $parent.parent();\n        DELETED_FIELDS.push($parent.data('id'));\n        $parent.animate({\n          top: -60,\n          left: 60,\n          opacity: 0.3\n        }, 300, function () {\n          $parent.remove();\n          reloadOrderNumber($grandParent.find('> li'));\n        });\n        $('#deleted_items').val(JSON.stringify(DELETED_FIELDS));\n      });\n      /**\r\n       *\r\n       * @param fields\r\n       * @param $appendTo\r\n       */\n\n\n      var initFields = function initFields(fields, $appendTo) {\n        /**\r\n         * Enable sortable\r\n         */\n        $appendTo.sortable();\n        fields.forEach(function (field, indexField) {\n          var $template = $(getNewFieldTemplate(field.type || 'text'));\n          $template.data('id', field.id || 0);\n          $template.find('.line[data-option=type] select').val(Helpers.arrayGet(field, 'type', 'text'));\n          $template.find('.line[data-option=title] input').val(Helpers.arrayGet(field, 'title', ''));\n          $template.find('.line[data-option=slug] input').val(Helpers.arrayGet(field, 'slug', ''));\n          $template.find('.line[data-option=instructions] textarea').val(Helpers.arrayGet(field, 'instructions', ''));\n          $template.find('.line[data-option=defaultvalue] input').val(Helpers.arrayGet(field.options, 'defaultValue', ''));\n          $template.find('.line[data-option=defaultvaluetextarea] textarea').val(Helpers.arrayGet(field.options, 'defaultValueTextarea', ''));\n          $template.find('.line[data-option=placeholdertext] input').val(Helpers.arrayGet(field.options, 'placeholderText', ''));\n          $template.find('.line[data-option=wysiwygtoolbar] select').val(Helpers.arrayGet(field.options, 'wysiwygToolbar', 'basic'));\n          $template.find('.line[data-option=selectchoices] textarea').val(Helpers.arrayGet(field.options, 'selectChoices', ''));\n          $template.find('.line[data-option=buttonlabel] input').val(Helpers.arrayGet(field.options, 'buttonLabel', ''));\n          $template.find('.line[data-option=rows] input').val(Helpers.arrayGet(field.options, 'rows', ''));\n          $template.find('.field-label').html(Helpers.arrayGet(field, 'title', 'Text'));\n          $template.find('.field-slug').html(Helpers.arrayGet(field, 'slug', 'text'));\n          $template.find('.field-type').html(Helpers.arrayGet(field, 'type', 'text'));\n          $template.removeClass('active');\n          $template.attr('data-position', indexField + 1);\n          initFields(field.items, $template.find('.sortable-wrapper'));\n          $appendTo.append($template);\n        });\n      };\n\n      initFields(CUSTOM_FIELDS_DATA, $('.sortable-wrapper'));\n    }\n  }, {\n    key: \"exportRulesToJson\",\n    value: function exportRulesToJson() {\n      var result = [];\n      $('.custom-fields-rules .line-group-container .line-group').each(function (key, el) {\n        var $current = $(el);\n        var lineGroupData = [];\n        $current.find('.rule-line').each(function (index, element) {\n          var $currentLine = $(element);\n          var data = {\n            name: $currentLine.find('.rule-a').val(),\n            type: $currentLine.find('.rule-type').val(),\n            value: $currentLine.find('.rule-b:not(.hidden)').val()\n          };\n          lineGroupData.push(data);\n        });\n\n        if (lineGroupData.length > 0) {\n          result.push(lineGroupData);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"exportFieldsToJson\",\n    value: function exportFieldsToJson() {\n      var result = [];\n\n      var getAllFields = function getAllFields($from, $pushTo) {\n        $from.each(function (index, element) {\n          var object = {};\n          var $current = $(element);\n          object.id = $current.data('id') || 0;\n          object.title = $current.find('> .item-details > .line[data-option=title] input[type=text]').val() || null;\n          object.slug = $current.find('> .item-details > .line[data-option=slug] input[type=text]').val() || null;\n          object.instructions = $current.find('> .item-details > .line[data-option=instructions] textarea').val() || null;\n          object.type = $current.find('> .item-details > .line[data-option=type] select').val() || null;\n          object.options = {\n            defaultValue: $current.find('> .item-details > .options > .line[data-option=defaultvalue] input[type=text]').val() || null,\n            defaultValueTextarea: $current.find('> .item-details > .options > .line[data-option=defaultvaluetextarea] textarea').val() || null,\n            placeholderText: $current.find('> .item-details > .options > .line[data-option=placeholdertext] input[type=text]').val() || null,\n            wysiwygToolbar: $current.find('> .item-details > .options > .line[data-option=wysiwygtoolbar] select').val() || null,\n            selectChoices: $current.find('> .item-details > .options > .line[data-option=selectchoices] textarea').val() || null,\n            buttonLabel: $current.find('> .item-details > .options > .line[data-option=buttonlabel] input[type=text]').val() || null,\n            rows: $current.find('> .item-details > .options > .line[data-option=rows] input[type=number]').val() || null\n          };\n          object.items = [];\n          getAllFields($current.find('> .item-details > .options > .line[data-option=repeater] > .col-9 > .add-new-field > .sortable-wrapper > .ui-sortable-handle'), object.items);\n          $pushTo.push(object);\n        });\n      };\n\n      getAllFields($('#custom_field_group_items > .ui-sortable-handle'), result);\n      return result;\n    }\n  }]);\n\n  return ManageCustomFields;\n}();\n\n(function ($) {\n  $(window).on('load', function () {\n    new ManageCustomFields();\n  });\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./platform/plugins/custom-field/resources/assets/js/edit-field-group.js\n");

/***/ }),

/***/ 180:
/*!*************************************************************************************!*\
  !*** multi ./platform/plugins/custom-field/resources/assets/js/edit-field-group.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! E:\Jaydeep Mor\Work\Evolution IT Solutions\zhxcore\zhxcore_admin\platform\plugins\custom-field\resources\assets\js\edit-field-group.js */"./platform/plugins/custom-field/resources/assets/js/edit-field-group.js");


/***/ })

/******/ });